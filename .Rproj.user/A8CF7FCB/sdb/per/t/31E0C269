{
    "collab_server" : "",
    "contents" : "#import required libraries\npacman::p_load(pacman,XML)\n\n#base URl\nubase = \"http://www.cherryblossom.org/\"\n\n##############################################\n#Function to Extract the data                #\n##############################################\n\nextractResTable =\n  #\n  # Retrieve data from web site, \n  # find the preformatted text,\n  # and write lines or return as a character vector.\n  #\n  function(url = \"http://www.cherryblossom.org/results/2009/09cucb-F.htm\",\n           year = 1999, sex = \"female\", file = NULL)\n  {\n    doc = htmlParse(url)\n\n    if (year == 2000) {\n      # Get preformatted text from 4th font element\n      # The top file is ill formed so the <pre> search doesn't work.\n      ff = getNodeSet(doc, \"//font\")\n      txt = xmlValue(ff[[4]])\n      els = strsplit(txt, \"\\r\\n\")[[1]]\n    }\n    else if (year == 2009 & sex == \"male\") {\n      # Get preformatted text from <div class=\"Section1\"> element\n      # Each line of results is in a <pre> element\n      div1 = getNodeSet(doc, \"//div[@class='Section1']\")\n      pres = getNodeSet(div1[[1]], \"//pre\")\n      els = sapply(pres, xmlValue)\n    }\n     else if (year == 1999) {\n               # Get preformatted text from <pre> elements\n      pres = getNodeSet(doc, \"//pre\")\n      txt = xmlValue(pres[[1]])\n      els = strsplit(txt, \"\\n\")[[1]]  \n     } \n    else {\n      # Get preformatted text from <pre> elements\n      pres = getNodeSet(doc, \"//pre\")\n      txt = xmlValue(pres[[1]])\n      els = strsplit(txt, \"\\r\\n\")[[1]]   \n    } \n    \n    if (is.null(file)) return(els)\n    # Write the lines as a text file.\n    writeLines(els, con = file)\n  }\n\n############################################\n#          Pulling Mens Data               #\n############################################\nwomenURLs = \n  c(\"results/1999/cb99f.html\",\"results/2000/Cb003f.htm\",\"results/2001/oof_f.html\",\n    \"results/2002/ooff.htm\",\"results/2003/CB03-F.HTM\", \"results/2004/women.htm\",\"results/2005/CB05-F.htm\",\"results/2006/women.htm\",\n    \"results/2007/women.htm\",\"results/2008/women.htm\", \"results/2009/09cucb-F.htm\",\n    \"results/2010/2010cucb10m-f.htm\",\"results/2011/2011cucb10m-f.htm\", \"results/2012/2012cucb10m-f.htm\")\n    \n\n\n#urls = paste(ubase, menURLs, sep = \"\")\n\n#urls[1:3]\n\nurlsf = paste(ubase, womenURLs, sep = \"\")\n\nurlsf[1:3]\n\nyears = 1999:2012\nwomenTables = mapply(extractResTable, url = urlsf, year = years)\nnames(womenTables) = years\nsapply(womenTables, length)\nsave(womenTables, file = \"CBWomenTextTables.rda\")\n\n#create a directory for the data\n#dir.create(file.path(getwd(), \"WomenTxt\"))\n\n#Save the Data\n\n#write(x=womenTables$'2012',file=\"WomenTxt/2012.txt\")\n#write(x=womenTables$'2011',file=\"WomenTxt/2011.txt\")\n#write(x=womenTables$'2010',file=\"WomenTxt/2010.txt\")\n#write(x=womenTables$'2009',file=\"WomenTxt/2009.txt\")\n#write(x=womenTables$'2008',file=\"WomenTxt/2008.txt\")\n#write(x=womenTables$'2007',file=\"WomenTxt/2007.txt\")\n#write(x=womenTables$'2006',file=\"WomenTxt/2006.txt\")\n#write(x=womenTables$'2005',file=\"WomenTxt/2005.txt\")\n#write(x=womenTables$'2004',file=\"WomenTxt/2004.txt\")\n#write(x=womenTables$'2003',file=\"WomenTxt/2003.txt\")\n#write(x=womenTables$'2002',file=\"WomenTxt/2002.txt\")\n#write(x=womenTables$'2001',file=\"WomenTxt/2001.txt\")\n#write(x=womenTables$'2000',file=\"WomenTxt/2000.txt\")\n#write(x=womenTables$'1999',file=\"WomenTxt/1999.txt\")\n\n\n\n#setwd(\"~/EMD/CaseStudies/Runners/WebPages\")\n\n#m2012 = read.table(file=\"MenTxt/2012.txt\", skip = 8)\n\nels = readLines(\"WomenTxt/2005.txt\")\n\nels[1:10]\n\nels2011 = readLines(\"WomenTxt/2011.txt\")\nels2011[1:10]\n\neqIndex = grep(\"^===\", els)\neqIndex\n\nfirst3 = substr(els, 1, 3)\nwhich(first3 == \"===\")\n\nspacerRow = els[eqIndex]\nheaderRow = els[eqIndex - 1]\nbody = els[ -(1:eqIndex) ]\n\nheaderRow = tolower(headerRow)\n\nageStart = regexpr(\"ag\", headerRow)\nageStart\n\n\nage = substr(body, start = ageStart, stop = ageStart + 1)\nhead(age)\n\nsummary(as.numeric(age))\n\nblankLocs = gregexpr(\" \", spacerRow)\nblankLocs\n\nsearchLocs = c(0, blankLocs[[1]])\n\nValues = mapply(substr, list(body), \n                start = searchLocs[ -length(searchLocs)] + 1, \n                stop = searchLocs[ -1 ] - 1)\n\nfindColLocs = function(spacerRow) {\n\n  spaceLocs = gregexpr(\" \", spacerRow)[[1]]\n  rowLength = nchar(spacerRow)\n\n  if (substring(spacerRow, rowLength, rowLength) != \" \")\n    return( c(0, spaceLocs, rowLength + 1))\n  else return(c(0, spaceLocs))\n}\n\nselectCols = \nfunction(colNames, headerRow, searchLocs) \n{\n  sapply(colNames, \n         function(name, headerRow, searchLocs)\n         {\n           startPos = regexpr(name, headerRow)[[1]]\n           if (startPos == -1) \n             return( c(NA, NA) )\n    \n           index = sum(startPos >= searchLocs)\n           c(searchLocs[index] + 1, searchLocs[index + 1] - 1)\n         },\n         headerRow = headerRow, searchLocs = searchLocs )\n}\n\nsearchLocs = findColLocs(spacerRow)\nageLoc = selectCols(\"ag\", headerRow, searchLocs) \nages = mapply(substr, list(body), \n              start = ageLoc[1,], stop = ageLoc[2, ])\n\nsummary(as.numeric(ages))\n\n\nshortColNames = c(\"name\", \"home\", \"ag\", \"gun\", \"net\", \"time\")\n\nlocCols = selectCols(shortColNames, headerRow, searchLocs)\n\nValues = mapply(substr, list(body), start = locCols[1, ], \n                stop = locCols[2, ])\n\nclass(Values)\n\ncolnames(Values) = shortColNames\nhead(Values)\n\ntail(Values)[ , 1:3]\n\nextractVariables = \n  function(file, varNames =c(\"name\", \"home\", \"ag\", \"gun\",\n                             \"net\", \"time\"))\n{\n       # Find the index of the row with =s\n  eqIndex = grep(\"^===\", file)\n       # Extract the two key rows and the data\n  spacerRow = file[eqIndex] \n  headerRow = tolower(file[ eqIndex - 1 ])\n  body = file[ -(1 : eqIndex) ]\n       \n       # Obtain the starting and ending positions of variables\n  searchLocs = findColLocs(spacerRow)\n  locCols = selectCols(varNames, headerRow, searchLocs)\n\n  Values = mapply(substr, list(body), start = locCols[1, ], \n                  stop = locCols[2, ])\n  colnames(Values) = varNames\n  \n  invisible(Values)\n}\n\nffilenames = paste(\"WomenTxt/\", 1999:2012, \".txt\", sep = \"\")\nwomenFiles = lapply(ffilenames,  function(x){readLines(x,encoding =\"UTF-8\")})\nnames(womenFiles) = 1999:2012\n\nwomenResMat = lapply(womenFiles, extractVariables)\nlength(womenResMat)\n\nsapply(womenResMat, nrow)\n\n\n\n\n\n\n\n\n\n\n\n\n### The 2001 results for women are missing the === and the column names.\n### Can we pick it up from the 2001 men? YES! Make an exercise\n#wfilenames = paste(\"WomenTxt/\", 1999:2012, \".txt\", sep = \"\")\n#womenTables = lapply(wfilenames, readLines)\n\n#womenTables[[3]][1:5]\n\n#names(womenTables) = 1999:2012\n#womenResMat = lapply(womenTables, extractVariables)\n#head(womenResMat[[3]], 10)\n#tail(womenResMat[[3]], 10)\n\nage = as.numeric(womenResMat[['2012']][ , 'ag'])\n\ntail(age)\n\nage = sapply(womenResMat,\n             function(x) as.numeric(x[ , 'ag']))\n\n\n#pdf(\"CB_BoxplotAgeByYr.pdf\", width = 8, height = 5)\noldPar = par(mar = c(4.1, 4.1, 1, 1))\n\nboxplot(age, ylab = \"Age\", xlab = \"Year\")\n\npar(oldPar)\ndev.off()\n\nhead(womenFiles[['2003']])\n\nwomenFiles[['2006']][2200:2205]\n\nselectCols = function(shortColNames, headerRow, searchLocs) {\n  sapply(shortColNames, function(shortName, headerRow, searchLocs){\n    startPos = regexpr(shortName, headerRow)[[1]]\n    if (startPos == -1) return( c(NA, NA) )\n    index = sum(startPos >= searchLocs)\n    c(searchLocs[index] + 1, searchLocs[index + 1])\n  }, headerRow = headerRow, searchLocs = searchLocs )\n}\n             \n             \n\n\nwomenResMat = lapply(womenFiles, extractVariables)\n#womenResMat = lapply(womenFiles, extractVariables)\n\nage = sapply(womenResMat, \n             function(x) as.numeric(x[ , 'ag']))\n\n#pdf(\"CB_BoxplotAgeByYrRevised.pdf\", width = 8, height = 5)\noldPar = par(mar = c(4.1, 4.1, 1, 1))\nboxplot(age, ylab = \"Age\", xlab = \"Year\")\npar(oldPar)\ndev.off()\n\nsapply(age,  function(x) sum(is.na(x)))\n\nage2001 = age[[\"2001\"]]\n\ngrep(\"^===\", womenFiles[['2001']])\n\nbadAgeIndex = which(is.na(age2001)) + 5\nwomenFiles[['2001']][ badAgeIndex ]\n \nbadAgeIndex\n\nextractVariables = \nfunction(file, varNames =c(\"name\", \"home\", \"ag\", \"gun\",\n                           \"net\", \"time\"))\n{\n  \n  # Find the index of the row with =s\n  eqIndex = grep(\"^===\", file)\n  # Extract the two key rows and the data \n  spacerRow = file[eqIndex] \n  headerRow = tolower(file[ eqIndex - 1 ])\n  body = file[ -(1 : eqIndex) ]\n       # Remove footnotes and blank rows\n  footnotes = grep(\"^[[:blank:]]*(\\\\*|\\\\#)\", body)\n  if ( length(footnotes) > 0 ) body = body[ -footnotes ]\n  blanks = grep(\"^[[:blank:]]*$\", body)\n  if (length(blanks) > 0 ) body = body[ -blanks ]\n  \n  \n  # Obtain the starting and ending positions of variables   \n  searchLocs = findColLocs(spacerRow)\n  locCols = selectCols(varNames, headerRow, searchLocs)\n  \n  Values = mapply(substr, list(body), start = locCols[1, ], \n                  stop = locCols[2, ])\n  colnames(Values) = varNames\n  \n  return(Values)\n}\n\nwomenResMat = lapply(womenFiles, extractVariables)\n       \n       \n       \n\n#womenResMat = lapply(womenFiles, extractVariables)\n\nwhich(age2001 < 5)\n\nwomenFiles[['2001']][ which(age2001 < 5) + 5 ]\n\ncharTime = womenResMat[['2012']][, 'time']\nhead(charTime, 5)\n\ntail(charTime, 5)\n\ntimePieces = strsplit(charTime, \":\")\n\ntimePieces[[1]]\n\ntail(timePieces, 1)\n\ntimePieces = sapply(timePieces, as.numeric)\n\nrunTime = sapply(timePieces, \n                 function(x) {\n                   if (length(x) == 2) x[1] + x[2]/60\n                   else 60*x[1] + x[2] + x[3]/60\n                 })\n\nsummary(runTime)\n\nconvertTime = function(time) {\n  timePieces = strsplit(time, \":\")\n  timePieces = sapply(timePieces, as.numeric)\n  sapply(timePieces, function(x) {\n                      if (length(x) == 2) x[1] + x[2]/60\n                      else 60*x[1] + x[2] + x[3]/60\n                      })\n}\n\ncreateDF = \nfunction(Res, year, sex) \n{\n       # Determine which time to use\n  useTime = if( !is.na(Res[1, 'net']) )  \n              Res[ , 'net']\n            else if( !is.na(Res[1, 'gun']) ) \n               Res[ , 'gun']\n            else \n               Res[ , 'time']\n\n  runTime = convertTime(useTime)\n  \n  Results = data.frame(year = rep(year, nrow(Res)),\n                       sex = rep(sex, nrow(Res)),\n                       name = Res[ , 'name'],\n                       home = Res[ , 'home'],\n                       age = as.numeric(Res[, 'ag']), \n                       runTime = runTime,\n                       stringsAsFactors = FALSE)\n  invisible(Results)\n}\n\nwomenDF = mapply(createDF, womenResMat, year = 1999:2012,\n               sex = rep(\"F\", 14), SIMPLIFY = FALSE)\n\nwarnings()[ c(1:2, 49:50) ]\n\nsapply(womenDF, function(x) sum(is.na(x$runTime)))\n\n       \n       \n       createDF = function(Res, year, sex) \n{\n  # Determine which time to use\n  if ( !is.na(Res[1, 'net']) ) useTime = Res[ , 'net']\n  else if ( !is.na(Res[1, 'gun']) ) useTime = Res[ , 'gun']\n  else useTime = Res[ , 'time']\n  \n  # Remove # and * and blanks from time\n  useTime = gsub(\"[#\\\\*[:blank:]]\", \"\", useTime)\n  runTime = convertTime(useTime[ useTime != \"\" ])\n  \n  # Drop rows with no time\n  Res = Res[ useTime != \"\", ]\n  \n  Results = data.frame(year = rep(year, nrow(Res)),\n                       sex = rep(sex, nrow(Res)),\n                       name = Res[ , 'name'], home = Res[ , 'home'],\n                       age = as.numeric(Res[, 'ag']), \n                       runTime = runTime,\n                       stringsAsFactors = FALSE)\n  invisible(Results)\n}\n\nwomenDF = mapply(createDF, womenResMat, year = 1999:2012,\n               sex = rep(\"F\", 14), SIMPLIFY = FALSE)\n\nsapply(womenDF, function(x) sum(is.na(x$runTime)))\n\nseparatorIdx = grep(\"^===\", womenFiles[[\"2006\"]])\nseparatorRow = womenFiles[['2006']][separatorIdx]\nseparatorRowX = paste(substring(separatorRow, 1, 63), \" \", \n                      substring(separatorRow, 65, nchar(separatorRow)), \n                      sep = \"\")\nwomenFiles[['2006']][separatorIdx] = separatorRowX\n       \n       \n       \nwomenResMat = sapply(womenFiles, extractVariables)\nwomenDF = mapply(createDF, womenResMat, year = 1999:2012,\n               sex = rep(\"F\", 14), SIMPLIFY = FALSE)\n\n#separatorIdx = grep(\"^===\", womenFiles[[\"2006\"]])\n#separatorRow = womenFiles[['2006']][separatorIdx]\n#separatorRowX = paste(substring(separatorRow, 1, 63), \" \", \n#                      substring(separatorRow, 65, nchar(separatorRow)), \n#                      sep = \"\")\n#womenFiles[['2006']][separatorIdx] = separatorRowX\n\n#womenResMat = sapply(womenFiles, extractVariables)\n#womenDF = mapply(createDF, womenResMat, year = 1999:2012,\n#               sex = rep(\"W\", 14), SIMPLIFY = FALSE)\n\n#pdf(\"CB_BoxplotTimeByYr.#pdf\", width = 8, height = 5)\nboxplot(sapply(womenDF, function(x) x$runTime), \n        xlab = \"Year\", ylab = \"Run Time (min)\")\ndev.off()\n\ncbWomen = do.call(rbind, womenDF)\nsave(cbWomen, file = \"cbWomen.rda\")\n\ndim(cbWomen)\n",
    "created" : 1537491489045.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "3831989219",
    "id" : "31E0C269",
    "lastKnownWriteTime" : 1530579986,
    "last_content_update" : 1530579986,
    "path" : "~/Desktop/SMU/QTW/shr/all_case_studies/CaseStudy8/SourceAndCleanData_Women.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}