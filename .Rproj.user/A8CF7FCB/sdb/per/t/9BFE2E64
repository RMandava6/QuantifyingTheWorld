{
    "collab_server" : "",
    "contents" : "#import required libraries\npacman::p_load(pacman,tm,dplyr,ggplot2, qtlcharts,\nrpart,rpart.plot,MLmetrics,kernlab,mlbench)\n\n# Function 1: splitMessage \nsplitMessage = function(msg) {\n  splitPoint = match(\"\", msg)\n  header = msg[1:(splitPoint-1)]\n  body = msg[ -(1:splitPoint) ]\n  return(list(header = header, body = body))\n}\n\n# Function 2: getBoundary\ngetBoundary = function(header) {\n  boundaryIdx = grep(\"boundary=\", header)\n  boundary = gsub('\"', \"\", header[boundaryIdx])\n  gsub(\".*boundary= *([^;]*);?.*\", \"\\\\1\", boundary)\n}\n\n# Function 3: dropAttach\ndropAttach = function(body, boundary){\n  \n  bString = paste(\"--\", boundary, sep = \"\")\n  bStringLocs = which(bString == body)\n  \n  if (length(bStringLocs) <= 1) return(body)\n  \n  eString = paste(\"--\", boundary, \"--\", sep = \"\")\n  eStringLoc = which(eString == body)\n  if (length(eStringLoc) == 0) \n    return(body[ (bStringLocs[1] + 1) : (bStringLocs[2] - 1)])\n  \n  n = length(body)\n  if (eStringLoc < n) \n    return( body[ c( (bStringLocs[1] + 1) : (bStringLocs[2] - 1), \n                     ( (eStringLoc + 1) : n )) ] )\n  \n  return( body[ (bStringLocs[1] + 1) : (bStringLocs[2] - 1) ])\n}\n\n# Function 4: cleanText\ncleanText = function(msg)   {\n    tolower(gsub(\"[[:punct:]0-9[:space:][:blank:]]+\", \" \", msg))\n  }\n\n# Function 5; findMsgWords\nfindMsgWords =  function(msg, stopWords) {\n    if(is.null(msg))\n      return(character())\n    \n    words = unique(unlist(strsplit(cleanText(msg), \"[[:blank:]\\t]+\")))\n    \n    # drop empty and 1 letter words\n    words = words[ nchar(words) > 1]\n    words = words[ !( words %in% stopWords) ]\n    invisible(words)\n  }\n\n\n# Function 6: processAllWords\nprocessAllWords = function(dirName, stopWords)\n{\n  # read all files in the directory\n  fileNames = list.files(dirName, full.names = TRUE)\n  \n  # drop files that are not email, i.e., cmds\n  notEmail = grep(\"cmds$\", fileNames)\n  if ( length(notEmail) > 0) fileNames = fileNames[ - notEmail ]\n  \n  messages = lapply(fileNames, readLines, encoding = \"latin1\")\n  \n  # split header and body\n  emailSplit = lapply(messages, splitMessage)\n  \n  # put body and header in own lists\n  bodyList = lapply(emailSplit, function(msg) msg$body)\n  headerList = lapply(emailSplit, function(msg) msg$header)\n  rm(emailSplit)\n  \n  # determine which messages have attachments\n  hasAttach = sapply(headerList, function(header) {\n    CTloc = grep(\"Content-Type\", header)\n    if (length(CTloc) == 0) return(0)\n    multi = grep(\"multi\", tolower(header[CTloc])) \n    if (length(multi) == 0) return(0)\n    multi\n  })\n  \n  hasAttach = which(hasAttach > 0)\n  \n  # find boundary strings for messages with attachments\n  boundaries = sapply(headerList[hasAttach], getBoundary)\n  \n  # drop attachments from message body\n  bodyList[hasAttach] = mapply(dropAttach, bodyList[hasAttach], \n                               boundaries, SIMPLIFY = FALSE)\n  \n  # extract words from body\n  msgWordsList = lapply(bodyList, findMsgWords, stopWords)\n  \n  invisible(msgWordsList)\n}\n\n\n##########\n\n## MAIN ##\n\n##########\n\n#spamPath = system.file(package = \"RSpamData\")\n#spamPath = \"/Users/nolan/RPackages/RSpamData\"spamPath = \".\"\nspamPath = \"./spam\"\nlist.dirs(spamPath, full.names = FALSE)\n\ndirNames = list.files(path = paste(spamPath, \"messages\", \n                                   sep = .Platform$file.sep))\n\nfullDirNames = paste(spamPath, \"messages\", dirNames, \n                     sep = .Platform$file.sep)\n\n# stop words\nlibrary(tm)\nstopWords = stopwords()\ncleanSW = tolower(gsub(\"[[:punct:]0-9[:blank:]]+\", \" \", stopWords))\nSWords = unlist(strsplit(cleanSW, \"[[:blank:]]+\"))\nSWords = SWords[ nchar(SWords) > 1 ]\nstopWords = unique(SWords)\n\n\nmsgWordsList = lapply(fullDirNames, processAllWords, \n                      stopWords = stopWords) \n\nnumMsgs = sapply(msgWordsList, length)\nnumMsgs",
    "created" : 1538887435777.000,
    "dirty" : false,
    "encoding" : "ASCII",
    "folds" : "",
    "hash" : "3328169041",
    "id" : "9BFE2E64",
    "lastKnownWriteTime" : 1532401632,
    "last_content_update" : 1532401632,
    "path" : "~/Desktop/SMU/QTW/shr/all_case_studies/CaseStudy10/datacleaning.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 13,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}