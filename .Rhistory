#load("/Users/ramya/Desktop/CS10QTW.RData")
#Install RSpamData package that has all the emailfolders but this package is not availabel for version 3.5.0
spamPath = "/Users/rsimham/Desktop/SMU/QTW/Week5/SpamAssassinMessages"
list.dirs(spamPath, full.names = FALSE)
#Results for the above are the below folders:
#[1] ""           "easy_ham"   "easy_ham_2" "hard_ham"   "spam"       "spam_2"
#list.dirs(path, full.names = FALSE)
#We can observe fromt the folders listed that the ham messages have been....
#organized into those that are easy or difficult to detect
#Look at some of the files in the easy_ham folder
head(list.files(path = paste(spamPath, "easy_ham",
sep = .Platform$file.sep)))
#We check that the names of the messages in the spam directories look the same as those in the ham directories with
head(list.files(path = paste(spamPath, "spam_2",
sep = .Platform$file.sep)))
#How many files are there all together?
dirNames = list.files(path = spamPath)
length(list.files(paste(spamPath, dirNames,
sep = .Platform$file.sep)))
#Result 9353
#There are over 9000 messages in the 5 directories combined.
#These are not equally divided between the 5 directories, i.e.,
sapply(paste(spamPath,dirNames,
sep = .Platform$file.sep),
function(dir) length(list.files(dir)) )
#Result: /Users/ramya/Documents/SMU/QTW/Week6/SpamAssassinMessages/easy_ham
#5052
#/Users/ramya/Documents/SMU/QTW/Week6/SpamAssassinMessages/easy_ham_2
#1401
#/Users/ramya/Documents/SMU/QTW/Week6/SpamAssassinMessages/hard_ham
#501
#/Users/ramya/Documents/SMU/QTW/Week6/SpamAssassinMessages/spam
#1001
#/Users/ramya/Documents/SMU/QTW/Week6/SpamAssassinMessages/spam_2
#1398
#Construct fullname for these directories
fullDirNames = paste(spamPath, dirNames,
sep = .Platform$file.sep)
#Obtain full names of the files within the first directiry
fileNames = list.files(fullDirNames[1], full.names = TRUE)
fileNames[1]
#Read the first message in easy_ham
msg = readLines(fileNames[1])
head(msg)
#We have chosen, by manual inspection, 15 ham message files from the first directory...
#that exhibit different characteristics of email. We read them into R as follows:
indx = c(1:5, 15, 27, 68, 69, 329, 404, 427, 516, 852, 971)
fn = list.files(fullDirNames[1], full.names = TRUE)[indx]
sampleEmail = sapply(fn, readLines)
############################
msg = sampleEmail[[1]]
which(msg == "")[1]
match("", msg)
splitPoint = match("", msg)
msg[ (splitPoint - 2):(splitPoint + 6) ]
header = msg[1:(splitPoint-1)]
body = msg[ -(1:splitPoint) ]
splitMessage = function(msg) {
splitPoint = match("", msg)
header = msg[1:(splitPoint-1)]
body = msg[ -(1:splitPoint) ]
return(list(header = header, body = body))
}
sampleSplit = lapply(sampleEmail, splitMessage)
header = sampleSplit[[1]]$header
grep("Content-Type", header)
grep("multi", tolower(header[46]))
header[46]
headerList = lapply(sampleSplit, function(msg) msg$header)
CTloc = sapply(headerList, grep, pattern = "Content-Type")
CTloc
sapply(headerList, function(header) {
headerList = lapply(sampleSplit, function(msg) msg$header)
CTloc = sapply(headerList, grep, pattern = "Content-Type")
CTloc
sapply(headerList, function(header) {
CTloc = grep("Content-Type", header)
if (length(CTloc) == 0) return(NA)
CTloc
})
hasAttach = sapply(headerList, function(header) {
CTloc = grep("Content-Type", header)
if (length(CTloc) == 0) return(FALSE)
grepl("multi", tolower(header[CTloc]))
})
hasAttach
header = sampleSplit[[6]]$header
boundaryIdx = grep("boundary=", header)
header[boundaryIdx]
sub(".*boundary=\"(.*)\";.*", "\\1", header[boundaryIdx])
header2 = headerList[[9]]
boundaryIdx2 = grep("boundary=", header2)
header2[boundaryIdx2]
#Boundary
sub('.*boundary="(.*)";.*', "\\1", header2[boundaryIdx2])
boundary2 = gsub('"', "", header2[boundaryIdx2])
sub(".*boundary= *(.*);?.*", "\\1", boundary2)
boundary = gsub('"', "", header[boundaryIdx])
sub(".*boundary= *(.*);?.*", "\\1", boundary)
sub(".*boundary= *([^;]*);?.*", "\\1", boundary)
getBoundary = function(header) {
boundaryIdx = grep("boundary=", header)
boundary = gsub('"', "", header[boundaryIdx])
gsub(".*boundary= *([^;]*);?.*", "\\1", boundary)
}
sampleSplit[[6]]$body
boundary = getBoundary(headerList[[15]])
body = sampleSplit[[15]]$body
hasAttach
headerList = lapply(sampleSplit, function(msg) msg$header)
headerList = lapply(sampleSplit, function(msg) msg$header)
CTloc = sapply(headerList, grep, pattern = "Content-Type")
CTloc
sapply(headerList, function(header) {
CTloc = grep("Content-Type", header)
if (length(CTloc) == 0) return(NA)
CTloc
})
hasAttach = sapply(headerList, function(header) {
CTloc = grep("Content-Type", header)
if (length(CTloc) == 0) return(FALSE)
grepl("multi", tolower(header[CTloc]))
})
hasAttach
header = sampleSplit[[6]]$header
boundaryIdx = grep("boundary=", header)
header[boundaryIdx]
sub(".*boundary=\"(.*)\";.*", "\\1", header[boundaryIdx])
header2 = headerList[[9]]
boundaryIdx2 = grep("boundary=", header2)
header2[boundaryIdx2]
#Boundary
sub('.*boundary="(.*)";.*', "\\1", header2[boundaryIdx2])
boundary2 = gsub('"', "", header2[boundaryIdx2])
sub(".*boundary= *(.*);?.*", "\\1", boundary2)
boundary = gsub('"', "", header[boundaryIdx])
sub(".*boundary= *(.*);?.*", "\\1", boundary)
sub(".*boundary= *([^;]*);?.*", "\\1", boundary)
getBoundary = function(header) {
boundaryIdx = grep("boundary=", header)
boundary = gsub('"', "", header[boundaryIdx])
gsub(".*boundary= *([^;]*);?.*", "\\1", boundary)
}
sampleSplit[[6]]$body
boundary = getBoundary(headerList[[15]])
body = sampleSplit[[15]]$body
bString = paste("--", boundary, sep = "")
bStringLocs = which(bString == body)
bStringLocs
eString = paste("--", boundary, "--", sep = "")
eStringLoc = which(eString == body)
eStringLoc
msg = body[ (bStringLocs[1] + 1) : (bStringLocs[2] - 1)]
tail(msg)
msg = c(msg, body[ (eStringLoc + 1) : length(body) ])
tail(msg)
dropAttach = function(body, boundary){
bString = paste("--", boundary, sep = "")
bStringLocs = which(bString == body)
if (length(bStringLocs) <= 1) return(body)
eString = paste("--", boundary, "--", sep = "")
eStringLoc = which(eString == body)
if (length(eStringLoc) == 0)
return(body[ (bStringLocs[1] + 1) : (bStringLocs[2] - 1)])
n = length(body)
if (eStringLoc < n)
return( body[ c( (bStringLocs[1] + 1) : (bStringLocs[2] - 1),
( (eStringLoc + 1) : n )) ] )
return( body[ (bStringLocs[1] + 1) : (bStringLocs[2] - 1) ])
}
head(sampleSplit[[1]]$body)
msg = sampleSplit[[3]]$body
head(msg)
msg[ c(1, 3, 26, 27) ]
cleanMsg = tolower(gsub("[[:punct:]0-9[:blank:]]+", " ", msg))
cleanMsg[ c(1, 3, 26, 27) ]
library(tm)
stopWords = stopwords()
install.packages("tm")
library(tm)
install.packages("slam")
install.packages("xml2")
install.packages("tm")
library(tm)
install.packages("tm")
library(tm)
stopWords = stopwords()
install.packages("tm", repos="http://R-Forge.R-project.org")
library(tm)
install.packages("tm", repos="http://R-Forge.R-project.org")
install.packages("slam")
install.packages('devtools')
library(devtools)
slam_url <- "https://cran.r-project.org/src/contrib/Archive/slam/slam_0.1-37.tar.gz"
install_url(slam_url)
install.packages("slam")
install.packages("r-cran-slam")
